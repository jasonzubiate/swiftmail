datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscription Subscription?
  billing Billing?
  templates Template[]
  credits Int @default(0)
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum SubscriptionTier {
  PRO
  PREMIUM
}

model Subscription {
  id        String           @id @default(cuid())
  tier      SubscriptionTier
  startDate DateTime         @default(now())
  endDate   DateTime?
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @unique
}

model Template {
  id          String   @id @default(cuid())
  name        String
  html        String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  AIGeneratedContent AIGeneratedContent[]
}

model AIGeneratedContent {
  id        String   @id @default(cuid())
  content   String   @db.Text
  prompt    String
  createdAt DateTime @default(now())
  template  Template @relation(fields: [templateId], references: [id])
  templateId String
}

model Billing {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  cardLast4    String?
  cardBrand    String?
  expiryMonth  Int?
  expiryYear   Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}